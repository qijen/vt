/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class vtWindow : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal vtWindow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(vtWindow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~vtWindow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtCSWindowPINVOKE.delete_vtWindow(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public vtWindow() : this(vtCSWindowPINVOKE.new_vtWindow(), true) {
  }

  public int CreateAsChild(SWIGTYPE_p_long parent) {
    int ret = vtCSWindowPINVOKE.vtWindow_CreateAsChild(swigCPtr, SWIGTYPE_p_long.getCPtr(parent));
    return ret;
  }

  public int Run() {
    int ret = vtCSWindowPINVOKE.vtWindow_Run(swigCPtr);
    return ret;
  }

  public int Init() {
    int ret = vtCSWindowPINVOKE.vtWindow_Init(swigCPtr);
    return ret;
  }

  public void ParseCommandLine(string cmdLine) {
    vtCSWindowPINVOKE.vtWindow_ParseCommandLine(swigCPtr, cmdLine);
  }

  public void Destroy() {
    vtCSWindowPINVOKE.vtWindow_Destroy(swigCPtr);
  }

  public int Tick() {
    int ret = vtCSWindowPINVOKE.vtWindow_Tick(swigCPtr);
    return ret;
  }

  public int DoFrame() {
    int ret = vtCSWindowPINVOKE.vtWindow_DoFrame(swigCPtr);
    return ret;
  }

  public int Show(int ShowFlags) {
    int ret = vtCSWindowPINVOKE.vtWindow_Show(swigCPtr, ShowFlags);
    return ret;
  }

  public int GetWidth() {
    int ret = vtCSWindowPINVOKE.vtWindow_GetWidth(swigCPtr);
    return ret;
  }

  public int GetHeight() {
    int ret = vtCSWindowPINVOKE.vtWindow_GetHeight(swigCPtr);
    return ret;
  }

  public int UpdateRenderSize(int w, int h) {
    int ret = vtCSWindowPINVOKE.vtWindow_UpdateRenderSize(swigCPtr, w, h);
    return ret;
  }

  public int SendMessage(string targetObject, string message, int id0, int id1, int id2, int value) {
    int ret = vtCSWindowPINVOKE.vtWindow_SendMessage__SWIG_0(swigCPtr, targetObject, message, id0, id1, id2, value);
    return ret;
  }

  public int SendMessage(string targetObject, string message, int id0, int id1, int id2, float value) {
    int ret = vtCSWindowPINVOKE.vtWindow_SendMessage__SWIG_1(swigCPtr, targetObject, message, id0, id1, id2, value);
    return ret;
  }

  public int SendMessage(string targetObject, string message, int id0, int id1, int id2, string value) {
    int ret = vtCSWindowPINVOKE.vtWindow_SendMessage__SWIG_2(swigCPtr, targetObject, message, id0, id1, id2, value);
    return ret;
  }

  public int HasMessages() {
    int ret = vtCSWindowPINVOKE.vtWindow_HasMessages(swigCPtr);
    return ret;
  }

  public int GetNumMessages() {
    int ret = vtCSWindowPINVOKE.vtWindow_GetNumMessages(swigCPtr);
    return ret;
  }

  public string GetMessageName(int messageID) {
    string ret = vtCSWindowPINVOKE.vtWindow_GetMessageName(swigCPtr, messageID);
    return ret;
  }

  public int GetNumParameters(int messageID) {
    int ret = vtCSWindowPINVOKE.vtWindow_GetNumParameters(swigCPtr, messageID);
    return ret;
  }

  public int GetMessageParameterType(int messageID, int parameterSubID) {
    int ret = vtCSWindowPINVOKE.vtWindow_GetMessageParameterType(swigCPtr, messageID, parameterSubID);
    return ret;
  }

  public int GetMessageValueInt(int messageID, int parameterSubID) {
    int ret = vtCSWindowPINVOKE.vtWindow_GetMessageValueInt(swigCPtr, messageID, parameterSubID);
    return ret;
  }

  public float GetMessageValueFloat(int messageID, int parameterSubID) {
    float ret = vtCSWindowPINVOKE.vtWindow_GetMessageValueFloat(swigCPtr, messageID, parameterSubID);
    return ret;
  }

  public string GetMessageValueStr(int messageID, int parameterSubID) {
    string ret = vtCSWindowPINVOKE.vtWindow_GetMessageValueStr(swigCPtr, messageID, parameterSubID);
    return ret;
  }

  public void CleanMessages() {
    vtCSWindowPINVOKE.vtWindow_CleanMessages(swigCPtr);
  }

  public void DeleteMessage(int messageID) {
    vtCSWindowPINVOKE.vtWindow_DeleteMessage(swigCPtr, messageID);
  }

  public void Pause() {
    vtCSWindowPINVOKE.vtWindow_Pause(swigCPtr);
  }

  public void Play() {
    vtCSWindowPINVOKE.vtWindow_Play(swigCPtr);
  }

  public void LoadCompostion(string file) {
    vtCSWindowPINVOKE.vtWindow_LoadCompostion(swigCPtr, file);
  }

  public void Terminate(int flags) {
    vtCSWindowPINVOKE.vtWindow_Terminate(swigCPtr, flags);
  }

  public int WndProc(SWIGTYPE_p_long hWnd, int uMsg, SWIGTYPE_p_long wParam, SWIGTYPE_p_long lParam) {
    int ret = vtCSWindowPINVOKE.vtWindow_WndProc(swigCPtr, SWIGTYPE_p_long.getCPtr(hWnd), uMsg, SWIGTYPE_p_long.getCPtr(wParam), SWIGTYPE_p_long.getCPtr(lParam));
    return ret;
  }

}
